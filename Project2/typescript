Script started on Fri 17 Mar 2023 11:41:59 PM EDT
]0;reale_nf@cobra:~/Project2[?1034h[reale_nf@cobra Project2]$ exitcat teamStats.cpp 
#include <fstream>
#include <cstdlib>
#include <cctype>
#include <iostream>
#include <string>
#include "baseball.h"
#include <bits/stdc++.h>

void Start(int argc, char *argv[], BaseballForest& S); 
void SepName(string pName, string& fName, string& lName);
void FixAndInput(string lineIn, BaseballForest& S);
void PrintMenu();
void GetCmd(char& command);
void searchP(BaseballForest S);
void searchB(BaseballForest S);

int main(int argc, char *argv[]){
			
	BaseballForest S;
	char command;
	
	Start(argc, argv, S);
	do{
		PrintMenu();
		GetCmd(command);
		switch(command){
			case 'P':
				S.nameOrder();
				break;
			case 'B':
				S.bavgOrder();
				break;
			case 'S':
				searchP(S);
				break;
			case 'R':
				searchB(S);
				break;
			case 'C':
				cout << "There are " << S.countNodes() << " Players" << endl;
				break;
			case 'M':
				S.makeEmpty();
				break;
		}
		cin.ignore();
		cin.get();
	}
	while(command != 'E');
	return 0;
}

void Start(int argc, char *argv[], BaseballForest& S){
	//Pre: Command Line Args and Empty Tree Class
	//Pst: Full Forest
	if(argc == 1){
		cout << "File Not Input" << endl;
		exit(1);
	}
	if(argc < 2){
		cout << "Too Many Args Try Again" << endl;
		exit(1);
	}
	else{
		ifstream inFile;
		string lineIn;
		inFile.open(argv[1]);
		if(inFile.fail()){
			cout<< "File Not Found" << endl;
			exit(1);
		}
		while(getline(inFile, lineIn)){
			FixAndInput(lineIn, S);
		}
	}
}

void SepName(string pName, string& fName, string& lName){
	//Pre: Full Name
	//Post: fName and lName contain the fitst and last name in the correct format
	size_t NameSep = pName.find(", ");
	if (NameSep < 100000){
		char firstL;
		lName = pName.substr(0, NameSep);
		fName = pName.substr(NameSep+2);
		transform(fName.begin() + 1, fName.end(), fName.begin()+1, [](unsigned char c){return tolower(c);});
		transform(lName.begin() + 1, lName.end(), lName.begin()+1, [](unsigned char c){return tolower(c);});
		firstL = toupper(lName[0]);
		lName = firstL + lName.substr(1);
		firstL = toupper(fName[0]);
		fName = firstL + fName.substr(1);	
	}
	else{
		fName = "///";
		lName = "///";
	} 
}

void FixAndInput(string lineIn, BaseballForest& S){
	//Pre: Raw Line In
	//Post: Line Added to the trees
	size_t front = lineIn.find("<b>");//add 3
	size_t endOfName = lineIn.find(".");//sub 4
	size_t frontOfBavg = lineIn.find(" .");//add 1
	size_t back = lineIn.find("</b>");//sub 1

	
	if (front < 1000000){
	
		string fName;
		string lName;
		string pName = lineIn.substr(front+3, (endOfName-front)-3);
		SepName(pName, fName, lName);
		pName = lName + ", " + fName;

		string bavg = lineIn.substr(frontOfBavg+1,(back-frontOfBavg)-1);
		float flAvg = stof(bavg);
		
		S.insertName(pName, flAvg);
		S.insertBavg(pName, flAvg);
	} 
} 
void PrintMenu(){
	//Post: theres a menu now
	cout<<"((((((((     BASEBALL TREE STATS     ))))))))"<< endl;
	cout<<"P) Print A Team Report Sorted By Player Name "<< endl;
	cout<<"B) Print A Team Report By High Batting Avg   "<< endl;
	cout<<"S) Search For An Indiviual Player            "<< endl;
	cout<<"R) Search By Batting Avg Range               "<< endl;
	cout<<"C) Count Number of Players In Name Tree      "<< endl;
	cout<<"M) Free Up All Dynamic Memory From Both Trees"<< endl;
	cout<<"E) Exit Software                             "<< endl;
	cout<<"---------------------------------------------"<< endl;
	cout<<"OPTION => ";


}
void GetCmd(char& command){
	//Pre: Empty command variable
	//Post: Variable Filled with user Input
	char userInput[255];
	cin >> userInput;
	if(userInput != NULL && userInput[1] != ' '){
		command = toupper(userInput[0]);
	}
	else{
		command = 'X';
	}
}

float parseFloat(){
	//Post: Grabs User Input
	string inLine;
	cin.ignore();
	getline(cin, inLine);
	return atof(inLine.c_str());
}
void searchP(BaseballForest S){
	//Pre:Baseball object
	//Post:Shows Serch value based on UI
	string inLine;
	string fName;
	string lName;
	cout<<"   Search Last, First =>";
	cin.ignore();
	getline(cin, inLine);
	SepName(inLine, fName, lName);
	string pName = lName + ", " + fName;
	if (S.find(pName))
		S.printLine(pName);
	else
		cout<<"Player Not Found" << endl; 
}
void searchB(BaseballForest S){
	//Pre: BaseballForest object
	//Post: Shows Search Results based on UI
	cout <<"   Input Min Bavg =";
	float min = parseFloat();

	cout<< "   Input Max Bavg =";
	float max = parseFloat();

	S.bavgOrder(min, max);	
}
]0;reale_nf@cobra:~/Project2[reale_nf@cobra Project2]$ cat teamStats.cpp [C[K[K[K[K[K[K[K[K[K[K[K[K[K[Kbn[Kaseball.cpp 
#include <fstream>
#include <cstdlib>
#include <cctype>
#include <iostream>
#include <string>
#include "baseball.h"
#include <bits/stdc++.h>



BaseballForest::BaseballForest(){
	root = NULL;
	root2 = NULL;
}
BaseballForest::~BaseballForest(){
	//cout<<"DESTRUCTOR CALLED"<<endl;
	//makeEmpty(root);
	//makeEmpty(root2);	
}
bool BaseballForest::find(string pname)const{
	if(findAddr(root, pname) != NULL)
		return true;
	else
		return false;
}
void BaseballForest::insertName(string pname, float pavg){
	insertName(root, pname, pavg);
}
void BaseballForest::insertBavg(string pname, float pavg){
	insertBavg(root2, pname,pavg);
}
void BaseballForest::nameOrder()const{
	if (root == NULL)
		cout<<"Tree Is Empty"<< endl;
	else
		nameOrder(root);
}
void BaseballForest::bavgOrder() const{
	if (root2 == NULL)
		cout<< "Tree Is Empty" <<endl;
	else
		bavgOrder(root2);
}
void BaseballForest::bavgOrder(float min, float max) const{
	if(root2 == NULL)
		cout<< "Tree is Empty" << endl;
	else
		bavgOrder(root2, min, max);
}
void BaseballForest::printLine(string pname) const{
	TreePtr prt = findAddr(root, pname);
	cout << "\t" << setw(20) << (prt -> name).c_str() << setw(15) << (prt -> bavg) <<endl;
}
void BaseballForest::makeEmpty(){
	makeEmpty(root);
	makeEmpty(root2);
}
int BaseballForest::countNodes() const{
	return countNodes(root);
}
//start of privates
TreePtr BaseballForest::findAddr(TreePtr t, string pname) const{
	if(t == NULL)
		return NULL;
	else if(t->name == pname)
		return t;
	else if(t -> name < pname)
		return findAddr(t -> rightName, pname);
	else
		return findAddr(t-> leftName, pname);	
}
void BaseballForest::nameOrder(TreePtr t) const{
	if(t== NULL)
		return;
	else{
		nameOrder(t->leftName);
		printLine(t-> name);
		nameOrder(t->rightName);
	} 
}
void BaseballForest::bavgOrder(TreePtr t) const{
	if(t == NULL)
		return;
	else{
		bavgOrder(t-> rightBavg);
		printLine(t-> name);
		bavgOrder(t-> leftBavg);
	}
}
void BaseballForest::bavgOrder(TreePtr t,float min,float max) const{
	if(t==NULL)
		return;
	else if( t -> bavg > max)
		return;
	if(t -> bavg < min)
		return;
	else{
		bavgOrder(t-> rightBavg, min, max);
		printLine(t-> name);
		bavgOrder(t-> leftBavg, min, max);
	}		
}
void BaseballForest::insertName(TreePtr& t, string pname, float pavg){
	if(t == NULL){
		t = new TreeNode;
		t -> name = pname;
		t -> bavg = pavg;
		t -> leftName = NULL;
		t -> rightName = NULL;
		t -> leftBavg = NULL;
		t -> rightBavg = NULL;
	}
	else if(pname < t -> name)
		insertName(t->leftName,pname,pavg);
	else
		insertName(t->rightName,pname,pavg); 
}
void BaseballForest::insertBavg(TreePtr& t, string pname, float pavg){
	if(t == NULL){
		t = new TreeNode;
		t-> name = pname;
		t-> bavg = pavg;
		t-> leftName = NULL;
		t-> rightName = NULL;
		t-> leftBavg = NULL;
		t -> rightBavg = NULL;
	}
	else if ( pavg > t -> bavg)
		insertBavg( t -> rightBavg, pname, pavg);
	else
		insertBavg(t -> leftBavg, pname, pavg);
}
void BaseballForest::makeEmpty (TreePtr& root){
	if (root == NULL)
		return;
		makeEmpty(root -> leftName);
		makeEmpty(root -> rightName);
		makeEmpty(root -> leftBavg);
		makeEmpty(root -> rightBavg);
		delete root;
		root = NULL;
	return;
}
int BaseballForest::countNodes (TreePtr t) const{
	if(t == NULL)
		return 0;
	else if(t->leftName == NULL && t->rightName !=NULL)
		return countNodes(t-> rightName) + 1;
	else if(t->leftName != NULL && t-> rightName ==NULL)
		return countNodes(t-> leftName) + 1;
	else
		return countNodes(t ->leftName) + countNodes(t-> rightName) + 1;
}

]0;reale_nf@cobra:~/Project2[reale_nf@cobra Project2]$ cat baseball.cpp [1@teamStats[C[C[C[C[Cexit[Kcat teamStats.cpp v[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cexit[K./a.out mercer.htm [K[34@g++ -std=c++11 teamStats.cpp baseball.cpp[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[25Pcat[C[C[C[C[C[C[C[C[C[C[C[C[C[C[25@g++ -std=c++11 teamStats.cpp[C[C[C[C[C[C[C[C[C[C[C[C[C[C
]0;reale_nf@cobra:~/Project2[reale_nf@cobra Project2]$ ./a.out 
File Not Input
]0;reale_nf@cobra:~/Project2[reale_nf@cobra Project2]$ ./a.out mercer.htm 
((((((((     BASEBALL TREE STATS     ))))))))
P) Print A Team Report Sorted By Player Name 
B) Print A Team Report By High Batting Avg   
S) Search For An Indiviual Player            
R) Search By Batting Avg Range               
C) Count Number of Players In Name Tree      
M) Free Up All Dynamic Memory From Both Trees
E) Exit Software                             
---------------------------------------------
OPTION => P
	     Appalucci, Mike          0.252
	        Baker, Rocky          0.253
	      Blair, Brandon          0.279
	     Carter, Brandon              0
	      Clayton, Chris          0.248
	     Connelly, Chris          0.256
	         Davis, Seth              0
	       Gilmore, Marc              0
	       Hannah, Jimbo              0
	          Kelly, Tim          0.158
	        Komar, Steve            0.5
	     Magouirk, Brent          0.344
	    Mcdonough, James          0.185
	        Newton, Ryan          0.409
	      O'dell, Robbie          0.212
	         Page, Jason              0
	   Rodriguez, Rafael          0.343
	         Sas, Trevor          0.218
	       Schmidt, Greg          0.296
	         Woods, Andy            0.6

((((((((     BASEBALL TREE STATS     ))))))))
P) Print A Team Report Sorted By Player Name 
B) Print A Team Report By High Batting Avg   
S) Search For An Indiviual Player            
R) Search By Batting Avg Range               
C) Count Number of Players In Name Tree      
M) Free Up All Dynamic Memory From Both Trees
E) Exit Software                             
---------------------------------------------
OPTION => B
	         Woods, Andy            0.6
	        Komar, Steve            0.5
	        Newton, Ryan          0.409
	     Magouirk, Brent          0.344
	   Rodriguez, Rafael          0.343
	       Schmidt, Greg          0.296
	      Blair, Brandon          0.279
	     Connelly, Chris          0.256
	        Baker, Rocky          0.253
	     Appalucci, Mike          0.252
	      Clayton, Chris          0.248
	         Sas, Trevor          0.218
	      O'dell, Robbie          0.212
	    Mcdonough, James          0.185
	          Kelly, Tim          0.158
	       Hannah, Jimbo              0
	         Page, Jason              0
	         Davis, Seth              0
	     Carter, Brandon              0
	       Gilmore, Marc              0

((((((((     BASEBALL TREE STATS     ))))))))
P) Print A Team Report Sorted By Player Name 
B) Print A Team Report By High Batting Avg   
S) Search For An Indiviual Player            
R) Search By Batting Avg Range               
C) Count Number of Players In Name Tree      
M) Free Up All Dynamic Memory From Both Trees
E) Exit Software                             
---------------------------------------------
OPTION => S
   Search Last, First =>Newq ton, Ryan  
	        Newton, Ryan          0.409


((((((((     BASEBALL TREE STATS     ))))))))
P) Print A Team Report Sorted By Player Name 
B) Print A Team Report By High Batting Avg   
S) Search For An Indiviual Player            
R) Search By Batting Avg Range               
C) Count Number of Players In Name Tree      
M) Free Up All Dynamic Memory From Both Trees
E) Exit Software                             
---------------------------------------------
OPTION => S
   Search Last, First =>new  , a
Player Not Found


((((((((     BASEBALL TREE STATS     ))))))))
P) Print A Team Report Sorted By Player Name 
B) Print A Team Report By High Batting Avg   
S) Search For An Indiviual Player            
R) Search By Batting Avg Range               
C) Count Number of Players In Name Tree      
M) Free Up All Dynamic Memory From Both Trees
E) Exit Software                             
---------------------------------------------
OPTION => S
   Search Last, First =>asdad
Player Not Found


((((((((     BASEBALL TREE STATS     ))))))))
P) Print A Team Report Sorted By Player Name 
B) Print A Team Report By High Batting Avg   
S) Search For An Indiviual Player            
R) Search By Batting Avg Range               
C) Count Number of Players In Name Tree      
M) Free Up All Dynamic Memory From Both Trees
E) Exit Software                             
---------------------------------------------
OPTION => R
   Input Min Bavg =.1
   Input Max Bavg =.5
	         Woods, Andy            0.6
	        Komar, Steve            0.5
	        Newton, Ryan          0.409
	     Magouirk, Brent          0.344
	   Rodriguez, Rafael          0.343
	       Schmidt, Greg          0.296
	      Blair, Brandon          0.279
	     Connelly, Chris          0.256
	        Baker, Rocky          0.253
	     Appalucci, Mike          0.252
	      Clayton, Chris          0.248
	         Sas, Trevor          0.218
	      O'dell, Robbie          0.212
	    Mcdonough, James          0.185
	          Kelly, Tim          0.158


((((((((     BASEBALL TREE STATS     ))))))))
P) Print A Team Report Sorted By Player Name 
B) Print A Team Report By High Batting Avg   
S) Search For An Indiviual Player            
R) Search By Batting Avg Range               
C) Count Number of Players In Name Tree      
M) Free Up All Dynamic Memory From Both Trees
E) Exit Software                             
---------------------------------------------
OPTION => C
There are 20 Players

((((((((     BASEBALL TREE STATS     ))))))))
P) Print A Team Report Sorted By Player Name 
B) Print A Team Report By High Batting Avg   
S) Search For An Indiviual Player            
R) Search By Batting Avg Range               
C) Count Number of Players In Name Tree      
M) Free Up All Dynamic Memory From Both Trees
E) Exit Software                             
---------------------------------------------
OPTION => M

((((((((     BASEBALL TREE STATS     ))))))))
P) Print A Team Report Sorted By Player Name 
B) Print A Team Report By High Batting Avg   
S) Search For An Indiviual Player            
R) Search By Batting Avg Range               
C) Count Number of Players In Name Tree      
M) Free Up All Dynamic Memory From Both Trees
E) Exit Software                             
---------------------------------------------
OPTION => P
Tree Is Empty
B
((((((((     BASEBALL TREE STATS     ))))))))
P) Print A Team Report Sorted By Player Name 
B) Print A Team Report By High Batting Avg   
S) Search For An Indiviual Player            
R) Search By Batting Avg Range               
C) Count Number of Players In Name Tree      
M) Free Up All Dynamic Memory From Both Trees
E) Exit Software                             
---------------------------------------------
OPTION => B
Tree Is Empty

((((((((     BASEBALL TREE STATS     ))))))))
P) Print A Team Report Sorted By Player Name 
B) Print A Team Report By High Batting Avg   
S) Search For An Indiviual Player            
R) Search By Batting Avg Range               
C) Count Number of Players In Name Tree      
M) Free Up All Dynamic Memory From Both Trees
E) Exit Software                             
---------------------------------------------
OPTION => S
   Search Last, First =>asd
Player Not Found


((((((((     BASEBALL TREE STATS     ))))))))
P) Print A Team Report Sorted By Player Name 
B) Print A Team Report By High Batting Avg   
S) Search For An Indiviual Player            
R) Search By Batting Avg Range               
C) Count Number of Players In Name Tree      
M) Free Up All Dynamic Memory From Both Trees
E) Exit Software                             
---------------------------------------------
OPTION => R
   Input Min Bavg =1 a
   Input Max Bavg =b
Tree is Empty


((((((((     BASEBALL TREE STATS     ))))))))
P) Print A Team Report Sorted By Player Name 
B) Print A Team Report By High Batting Avg   
S) Search For An Indiviual Player            
R) Search By Batting Avg Range               
C) Count Number of Players In Name Tree      
M) Free Up All Dynamic Memory From Both Trees
E) Exit Software                             
---------------------------------------------
OPTION => C
There are 0 Players

((((((((     BASEBALL TREE STATS     ))))))))
P) Print A Team Report Sorted By Player Name 
B) Print A Team Report By High Batting Avg   
S) Search For An Indiviual Player            
R) Search By Batting Avg Range               
C) Count Number of Players In Name Tree      
M) Free Up All Dynamic Memory From Both Trees
E) Exit Software                             
---------------------------------------------
OPTION => E

]0;reale_nf@cobra:~/Project2[reale_nf@cobra Project2]$ exit
exit

Script done on Fri 17 Mar 2023 11:45:01 PM EDT
